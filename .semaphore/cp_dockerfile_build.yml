# This file is managed by ServiceBot plugin - Semaphore. The content in this file is created using a common
# template and configurations in service.yml.
# Any modifications made to ths file will be overwritten by the generated content in nightly runs.
# For more information, please refer to the page:
# https://confluentinc.atlassian.net/wiki/spaces/Foundations/pages/2871296194/Add+SemaphoreCI
version: v1.0
name: build-test-release
agent:
  machine:
    type: s1-prod-ubuntu24-04-amd64-1

fail_fast:
  cancel:
    when: "true"

execution_time_limit:
  hours: 1

queue:
  - when: "branch != 'master' and branch !~ '[0-9]+\\.[0-9]+\\.[0-9]+'"
    processing: parallel

global_job_config:
  prologue:
    commands:
      - checkout
      - if [[ $SEMAPHORE_GIT_BRANCH =~ ^7\..* ]]; then sem-version java 8; else sem-version java 17; fi
      - sem-version python 3.12
      - . vault-setup
      - . cache-maven restore
      - export GIT_COMMIT=$(git rev-parse --verify HEAD --short)
      - export BUILD_NUMBER=$(echo $SEMAPHORE_WORKFLOW_ID | cut -f1 -d"-")
      - export BRANCH_TAG=$(echo $SEMAPHORE_GIT_BRANCH | tr / -)
      # Semaphore does not accept empty values for parameters.
      - export ALLOW_UNSIGNED=$(echo $ALLOW_UNSIGNED | awk '{ print tolower($0) }')
      - >-
        echo """
        Parameters:
        ==========================
        GATEWAY_VERSION: $GATEWAY_VERSION
        PACKAGES_URL: $PACKAGES_URL
        PACKAGES_MAVEN_URL: $PACKAGES_MAVEN_URL
        PACKAGING_BUILD_NUMBER: $PACKAGING_BUILD_NUMBER
        ALLOW_UNSIGNED: $ALLOW_UNSIGNED
        """
      - if [[ $BRANCH_TAG =~ "-rc" ]]; then export IS_RC="true"; fi
      - if [[ $BRANCH_TAG =~ "-cp" ]]; then export IS_HOTFIX="true"; fi
      - if [[ $BRANCH_TAG =~ "-post" ]]; then export IS_POST="true"; fi
      - if [[ $BRANCH_TAG =~ "-beta" ]]; then export IS_BETA="true"; fi
      - if [[ $BRANCH_TAG =~ "-alpha" ]]; then export IS_PREVIEW="true"; fi
      - if [[ $IS_RC || $IS_HOTFIX || $IS_POST || $IS_BETA || $IS_PREVIEW ]]; then export IS_RELEASE="true"; fi

      - >-
        if [[ $IS_BETA || $IS_HOTFIX || $IS_POST ]]; then
            export PLATFORM_LABEL=$(echo $BRANCH_TAG | awk -F - '{print "~"$2}')
        elif [[ ! $IS_RELEASE ]]; then
            export PLATFORM_LABEL="~SNAPSHOT"
        else
            export PLATFORM_LABEL=""
        fi
      - export PACKAGING_BUILD_ARGS=" -DGATEWAY_VERSION=$GATEWAY_VERSION  -DCONFLUENT_PLATFORM_LABEL=$PLATFORM_LABEL -DALLOW_UNSIGNED=$ALLOW_UNSIGNED"
      - >-
        if [[ $IS_RELEASE && $PACKAGING_BUILD_NUMBER ]]; then
          if [[ $IS_RC ]]; then
              export MAVEN_PACKAGES_URL="https://s3.us-west-2.amazonaws.com/staging-confluent-packages-maven-654654529379-us-west-2/v$BRANCH_NAME/maven"
              if [[ $PACKAGES_MAVEN_URL ]]; then
                  export MAVEN_PACKAGES_URL=$PACKAGES_MAVEN_URL
              fi
          fi
          # Overwrite maven global configuration 
          vault kv get -field settings v1/ci/kv/maven/semaphore_maven_independent_release_packaging_settings > template-settings.xml
          mv ~/.m2/settings.xml ~/.m2/settings.xml.bak && envsubst < template-settings.xml > ~/.m2/settings.xml # Replacing maven settings with packaging specific settings
        else
          echo "This job is not a isHotfixJob or isRcJob (What we know how to handle) - and we don't know how to handle it"
        fi
      - export DOCKER_DEV_REGISTRY="519856050701.dkr.ecr.us-west-2.amazonaws.com/docker/dev/"
      - export DOCKER_PROD_REGISTRY="519856050701.dkr.ecr.us-west-2.amazonaws.com/docker/prod/"
      - export DOCKER_UPSTREAM_REGISTRY=$DOCKER_PROD_REGISTRY
      - export LATEST_TAG=$BRANCH_TAG-latest
      - export DOCKER_UPSTREAM_TAG="8.1.0-rc250918090705-latest"
      - export DOCKER_REPOS="confluentinc/cpc-gateway"
      - export MAVEN_EXTRA_ARGS=""
      - export DOCKER_DEV_TAG="dev-$BRANCH_TAG-$BUILD_NUMBER"
      - export AMD_ARCH=.amd64
      - export ARM_ARCH=.arm64
blocks:
  - name: Validation
    dependencies: []
    run:
      when: "branch = 'master'"
    task:
      jobs:
        - name: Validation
          commands:
            - . sem-pint -c
  - name: Build, Test, & Scan AMD
    dependencies: ["Validation"]
    run:
      # don't run the tests on non-functional changes...
      when: "change_in('/', {exclude: ['/.deployed-versions/', '.github/']})"
    task:
      jobs:
        - name: Build, Test, & Scan ubi9
          commands:
            - export OS_TAG="-ubi9"
            - export DOCKER_DEV_FULL_IMAGES=$DOCKER_DEV_REGISTRY${DOCKER_REPOS// /:$DOCKER_DEV_TAG$OS_TAG $DOCKER_DEV_REGISTRY}:$DOCKER_DEV_TAG$OS_TAG
            - export AMD_DOCKER_DEV_FULL_IMAGES=${DOCKER_DEV_FULL_IMAGES// /$AMD_ARCH }$AMD_ARCH
            - ci-tools ci-update-version
            - export OS_PACKAGES_URL=$(echo "$PACKAGES_URL" | sed "s/PACKAGE_TYPE/rpm/g")
            - export PACKAGING_BUILD_ARGS="$PACKAGING_BUILD_ARGS -DCONFLUENT_PACKAGES_REPO=$OS_PACKAGES_URL"
            - mvn -Dmaven.wagon.http.retryHandler.count=3 --batch-mode -P jenkins,docker clean package dependency:analyze validate -U -Ddocker.registry=$DOCKER_DEV_REGISTRY -Ddocker.upstream-registry=$DOCKER_UPSTREAM_REGISTRY
              -DBUILD_NUMBER=$BUILD_NUMBER -DGIT_COMMIT=$GIT_COMMIT -Ddocker.tag=$DOCKER_DEV_TAG$OS_TAG$AMD_ARCH -Ddocker.upstream-tag=$DOCKER_UPSTREAM_TAG$OS_TAG -Darch.type=$AMD_ARCH -Ddocker.os_type=ubi9
              $PACKAGING_BUILD_ARGS -Ddependency.check.skip=true $MAVEN_EXTRA_ARGS
            - . cache-maven store
            - >-
              for dev_image in $AMD_DOCKER_DEV_FULL_IMAGES;
              do
                cve-scan $dev_image
              done
            - for image in $AMD_DOCKER_DEV_FULL_IMAGES; do echo "Pushing $image" && docker push $image; done
      epilogue:
        always:
          commands:
            - . publish-test-results
            - artifact push workflow target/test-results
            - artifact push workflow target --destination target-AMD
  - name: Deploy AMD confluentinc/cpc-gateway
    dependencies: ["Build, Test, & Scan AMD"]
    run:
      when: "branch = 'master' or branch =~ '^[0-9]+\\.[0-9]+\\.x$' or branch =~ '^[0-9]+\\.[0-9]+\\.[0-9]+(-cp[0-9]+)?(-rc[0-9]+)?$'"
    task:
      jobs:
        - name: Deploy AMD confluentinc/cpc-gateway ubi9
          env_vars:
            - name: DOCKER_IMAGE
              value: confluentinc/cpc-gateway
          commands:
            - export OS_TAG="-ubi9"
            - export PROD_IMAGE_NAME=${DOCKER_PROD_REGISTRY}confluentinc/cpc-gateway
            - export GIT_COMMIT_TAG=$GIT_COMMIT$OS_TAG$AMD_ARCH
            - export BRANCH_BUILD_TAG=$BRANCH_TAG-$BUILD_NUMBER$OS_TAG$AMD_ARCH
            - export DEV_IMAGE_FULL=${DOCKER_DEV_REGISTRY}confluentinc/cpc-gateway:$DOCKER_DEV_TAG$OS_TAG$AMD_ARCH
            - docker pull $DEV_IMAGE_FULL
            - docker tag $DEV_IMAGE_FULL $PROD_IMAGE_NAME:$GIT_COMMIT_TAG
            - docker tag $DEV_IMAGE_FULL $PROD_IMAGE_NAME:$BRANCH_BUILD_TAG
            - docker push $PROD_IMAGE_NAME:$GIT_COMMIT_TAG
            - docker push $PROD_IMAGE_NAME:$BRANCH_BUILD_TAG
            - sign-images $PROD_IMAGE_NAME:$GIT_COMMIT_TAG
            - sign-images $PROD_IMAGE_NAME:$BRANCH_BUILD_TAG
            - export PACKAGE_TAG=$BRANCH_TAG-$PACKAGING_BUILD_NUMBER$OS_TAG$AMD_ARCH
            - docker tag $DEV_IMAGE_FULL $PROD_IMAGE_NAME:$PACKAGE_TAG
            - docker push $PROD_IMAGE_NAME:$PACKAGE_TAG
            - sign-images $PROD_IMAGE_NAME:$PACKAGE_TAG
            - export LATEST_PUSH_TAG=$LATEST_TAG$OS_TAG$AMD_ARCH
            - docker tag $DEV_IMAGE_FULL $PROD_IMAGE_NAME:$LATEST_PUSH_TAG
            - docker push $PROD_IMAGE_NAME:$LATEST_PUSH_TAG
  - name: Build & Test ARM
    dependencies: ["Validation"]
    run:
      # don't run the tests on non-functional changes...
      when: "change_in('/', {exclude: ['/.deployed-versions/', '.github/']})"
    task:
      agent:
        machine:
          type: s1-prod-ubuntu24-04-arm64-1
      jobs:
        - name: Build & Test ubi9
          commands:
            - export OS_TAG="-ubi9"
            - export DOCKER_DEV_FULL_IMAGES=$DOCKER_DEV_REGISTRY${DOCKER_REPOS// /:$DOCKER_DEV_TAG$OS_TAG $DOCKER_DEV_REGISTRY}:$DOCKER_DEV_TAG$OS_TAG
            - export ARM_DOCKER_DEV_FULL_IMAGES=${DOCKER_DEV_FULL_IMAGES// /$ARM_ARCH }$ARM_ARCH
            - export OS_PACKAGES_URL=$(echo "$PACKAGES_URL" | sed "s/PACKAGE_TYPE/rpm/g")
            - export PACKAGING_BUILD_ARGS="$PACKAGING_BUILD_ARGS -DCONFLUENT_PACKAGES_REPO=$OS_PACKAGES_URL"
            - ci-tools ci-update-version
            - mvn -Dmaven.wagon.http.retryHandler.count=3 --batch-mode -P jenkins,docker clean package dependency:analyze validate -U -Ddocker.registry=$DOCKER_DEV_REGISTRY -Ddocker.upstream-registry=$DOCKER_UPSTREAM_REGISTRY
              -DBUILD_NUMBER=$BUILD_NUMBER -DGIT_COMMIT=$GIT_COMMIT -Ddocker.tag=$DOCKER_DEV_TAG$OS_TAG$ARM_ARCH -Ddocker.upstream-tag=$DOCKER_UPSTREAM_TAG$OS_TAG -Darch.type=$ARM_ARCH -Ddocker.os_type=ubi9
              $PACKAGING_BUILD_ARGS -Ddependency.check.skip=true $MAVEN_EXTRA_ARGS
            - . cache-maven store
            - for image in $ARM_DOCKER_DEV_FULL_IMAGES; do echo "Pushing $image" && docker push $image; done
      epilogue:
        always:
          commands:
            - . publish-test-results
            - artifact push workflow target/test-results
            - artifact push workflow target --destination target-ARM
  - name: Deploy ARM confluentinc/cpc-gateway
    dependencies: ["Build & Test ARM"]
    run:
      when: "branch = 'master' or branch =~ '^[0-9]+\\.[0-9]+\\.x$' or branch =~ '^[0-9]+\\.[0-9]+\\.[0-9]+(-cp[0-9]+)?(-rc[0-9]+)?$'"
    task:
      agent:
        machine:
          type: s1-prod-ubuntu24-04-arm64-1
      jobs:
        - name: Deploy ARM confluentinc/cpc-gateway ubi9
          env_vars:
            - name: DOCKER_IMAGE
              value: confluentinc/cpc-gateway
          commands:
            - export OS_TAG="-ubi9"
            - export PROD_IMAGE_NAME=${DOCKER_PROD_REGISTRY}confluentinc/cpc-gateway
            - export GIT_COMMIT_TAG=$GIT_COMMIT$OS_TAG$ARM_ARCH
            - export BRANCH_BUILD_TAG=$BRANCH_TAG-$BUILD_NUMBER$OS_TAG$ARM_ARCH
            - export DEV_IMAGE_FULL=${DOCKER_DEV_REGISTRY}confluentinc/cpc-gateway:$DOCKER_DEV_TAG$OS_TAG$ARM_ARCH
            - docker pull $DEV_IMAGE_FULL
            - docker tag $DEV_IMAGE_FULL $PROD_IMAGE_NAME:$GIT_COMMIT_TAG
            - docker tag $DEV_IMAGE_FULL $PROD_IMAGE_NAME:$BRANCH_BUILD_TAG
            - docker push $PROD_IMAGE_NAME:$GIT_COMMIT_TAG
            - docker push $PROD_IMAGE_NAME:$BRANCH_BUILD_TAG
            - sign-images $PROD_IMAGE_NAME:$GIT_COMMIT_TAG
            - sign-images $PROD_IMAGE_NAME:$BRANCH_BUILD_TAG
            - export PACKAGE_TAG=$BRANCH_TAG-$PACKAGING_BUILD_NUMBER$OS_TAG$ARM_ARCH
            - docker tag $DEV_IMAGE_FULL $PROD_IMAGE_NAME:$PACKAGE_TAG
            - docker push $PROD_IMAGE_NAME:$PACKAGE_TAG
            - sign-images $PROD_IMAGE_NAME:$PACKAGE_TAG
            - export LATEST_PUSH_TAG=$LATEST_TAG$OS_TAG$ARM_ARCH
            - docker tag $DEV_IMAGE_FULL $PROD_IMAGE_NAME:$LATEST_PUSH_TAG
            - docker push $PROD_IMAGE_NAME:$LATEST_PUSH_TAG
  - name: Create Manifest
    dependencies: ["Deploy AMD confluentinc/cpc-gateway", "Deploy ARM confluentinc/cpc-gateway"]
    run:
      when: "branch = 'master' or branch =~ '^[0-9]+\\.[0-9]+\\.x$' or branch =~ '^[0-9]+\\.[0-9]+\\.[0-9]+(-cp[0-9]+)?(-rc[0-9]+)?$'"
    task:
      jobs:
        - name: Create Manifest
          commands:
            - export DOCKER_PROD_IMAGE_NAME=$DOCKER_PROD_REGISTRY${DOCKER_REPOS// / $DOCKER_PROD_REGISTRY}
            # Create manifest
            - >-
              for image in $DOCKER_PROD_IMAGE_NAME;
              do
                export OS_TAG="-ubi9"
                export GIT_TAG=$GIT_COMMIT$OS_TAG
                docker manifest create $image:$GIT_TAG $image:$GIT_TAG$AMD_ARCH $image:$GIT_TAG$ARM_ARCH
                docker manifest push $image:$GIT_TAG
                docker pull $image:$GIT_TAG
                sign-images $image:$GIT_TAG
                export BRANCH_BUILD_TAG=$BRANCH_TAG-$BUILD_NUMBER$OS_TAG
                docker manifest create $image:$BRANCH_BUILD_TAG $image:$BRANCH_BUILD_TAG$AMD_ARCH $image:$BRANCH_BUILD_TAG$ARM_ARCH
                docker manifest push $image:$BRANCH_BUILD_TAG
                docker pull $image:$BRANCH_BUILD_TAG
                sign-images $image:$BRANCH_BUILD_TAG
                export PACKAGE_TAG=$BRANCH_TAG-$PACKAGING_BUILD_NUMBER$OS_TAG
                docker manifest create $image:$PACKAGE_TAG $image:$PACKAGE_TAG$AMD_ARCH $image:$PACKAGE_TAG$ARM_ARCH
                docker manifest push $image:$PACKAGE_TAG
                export LATEST_MANIFEST_TAG=$LATEST_TAG$OS_TAG
                docker manifest create $image:$LATEST_MANIFEST_TAG $image:$LATEST_MANIFEST_TAG$AMD_ARCH $image:$LATEST_MANIFEST_TAG$ARM_ARCH
                docker manifest push $image:$LATEST_MANIFEST_TAG
              done
  - name: Push docker images tags summary to artifacts
    dependencies:
      - Create Manifest
    run:
      when: "branch = 'master' or branch =~ '^[0-9]+\\.[0-9]+\\.x$' or branch =~ '^[0-9]+\\.[0-9]+\\.[0-9]+(-cp[0-9]+)?(-rc[0-9]+)?$'"
    task:
      jobs:
        - name: Push docker images tags summary to artifacts
          commands:
            - export DOCKER_PROD_IMAGE_NAMES=$DOCKER_PROD_REGISTRY${DOCKER_REPOS// / $DOCKER_PROD_REGISTRY}
            - export OS_TAG="-ubi9"
            - echo "The following tags are available for this build:" > docker-tags-summary.txt
            - >-
              for image in $DOCKER_PROD_IMAGE_NAMES;
              do
                echo "$image:$GIT_COMMIT$OS_TAG" >> docker-tags-summary.txt
                echo "$image:$BRANCH_TAG-$BUILD_NUMBER$OS_TAG" >> docker-tags-summary.txt
                echo "$image:$BRANCH_TAG-$PACKAGING_BUILD_NUMBER$OS_TAG" >> docker-tags-summary.txt
                echo "$image:$LATEST_TAG$OS_TAG" >> docker-tags-summary.txt
                echo "" >> docker-tags-summary.txt
              done
            - echo "Tags summary saved to docker-tags-summary.txt"
            - artifact push workflow docker-tags-summary.txt
after_pipeline:
  task:
    agent:
      machine:
        type: s1-prod-ubuntu24-04-arm64-0
    jobs:
      - name: Metrics
        commands:
          - emit-ci-metrics -p -a test-results
      - name: Publish Test Results
        commands:
          - test-results gen-pipeline-report
      - name: SonarQube
        commands:
          - checkout
          - sem-version java 11
          - artifact pull workflow target-AMD
          - artifact pull workflow target-ARM
          - emit-sonarqube-data --run_only_sonar_scan
