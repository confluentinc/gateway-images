services:

# Below is a set of configs to bring up a vault container that acts as a secret store. This is used to store the secrets for the authentication swapping.
# After Gateway authentication is successful, Gateway extracts the principal of the incoming client and uses it to fetch the swapped credentials from the secret store.
# This swapped credentials are then used to authenticate the client to the kafka-1 broker.
# In the below example, we are storing the swapped credentials for the test_user in the secret store. 
# Post authentication swapping, the client will use the swapped credentials to authenticate to the kafka-1 broker.
# You can also view the Vault UI by hitting http://localhost:8200/ and login using vault-plaintext-root-token as the password
  vault:
    image: hashicorp/vault:1.14
    hostname: vault
    container_name: vault
    ports:
      - "8200:8200"
    environment:
      VAULT_ADDR: "http://0.0.0.0:8200"
      VAULT_API_ADDR: "http://0.0.0.0:8200"
      VAULT_DEV_ROOT_TOKEN_ID: "vault-plaintext-root-token"
    command:
      - /bin/sh
      - -c
      - |
        ./usr/local/bin/docker-entrypoint.sh server -dev &
        echo "Waiting for Vault to start..."
        # Wait until vault is ready
        while ! vault status; do sleep 1; done
        export VAULT_TOKEN=$( echo $${VAULT_DEV_ROOT_TOKEN_ID})
        # Write secrets to the Vault secrets engine
        vault kv put secret/testing test_user=test_user/swapped_password
        sleep infinity

# Below is a set of configs to bring up a single node Kafka setup with a single container acting as both broker and controller. 
  kafka-1:
    image: confluentinc/cp-server:latest
    container_name: kafka-1
    ports:
      - "33333:33333"  # External listener port (for clients outside Docker)
      - "44444:44444"  # Internal listener port (for internal communication)
      - "9093:9093"    # Controller port (for controller communication)
    volumes:
      - ${KAFKA_SERVER_JAAS_CONF}:/etc/kafka/jaas-config-for-broker-authn.conf # loading JAAS config for SASL authentication
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka-1:9093'
      CLUSTER_ID: '4L6g3nShT-eMCtK--X86sw'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'INTERNAL:SASL_PLAINTEXT,EXTERNAL:SASL_PLAINTEXT,CONTROLLER:PLAINTEXT'
      KAFKA_LISTENERS: 'INTERNAL://kafka-1:44444,EXTERNAL://0.0.0.0:33333,CONTROLLER://kafka-1:9093'
      KAFKA_ADVERTISED_LISTENERS: 'INTERNAL://kafka-1:44444,EXTERNAL://localhost:33333'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'INTERNAL'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_SASL_ENABLED_MECHANISMS: 'PLAIN'
      KAFKA_SASL_MECHANISM_INTER_BROKER_PROTOCOL: 'PLAIN'
      KAFKA_OPTS: '-Djava.security.auth.login.config=/etc/kafka/jaas-config-for-broker-authn.conf' # loading JAAS config for SASL authentication at kafka-1 broker. This is used to authenticate the client to the kafka-1 broker.

      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
  

      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_METADATA_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_COMMAND_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_METRICS_REPORTER_TOPIC_REPLICATION_FACTOR: 1

 # Below is a set of configs to bring up a gateway container that acts as a proxy for the kafka-1 broker defined above.  
 # kafka-1 is onboarded with the Gateway with streaming domain as sample-domain. Gateway connects to this sample streaming domain using internal-listener-endpoint as the bootstrap server endpoint.
 # This Gateway exposes one route called auth-swap-route. This route endpoint is running at localhost:19092. 
 # Clients stream data to Kafka-1 brokers via this route. Authentication swapping is enabled for this route.
 # When authentication swapping is enabled, Gateway will authenticate the incoming client and post successfull authentication, it will extract the principal of the incoming client and use it to fetch the swapped credentials from the secret store.
 # Gateway forwards the request to the kafka-1 broker using the swapped credentials. Broker will perform authentication using the swapped credentials.
 # For simplicity of local development, we are using port based routing.
 # Using mTLS encryption from client to gateway, as this is a requirement for enabling mtls auth-swap at gateway.
 # In a production environment, you should use TLS encryption from gateway to broker. And use SNI routing for routing requests to the correct broker.

  gateway:
    image: "${GATEWAY_IMAGE:-confluentinc/cpc-gateway:latest}"
    container_name: gateway
    depends_on:
      - kafka-1
      - vault
    volumes:
      - ${GATEWAY_JAAS_TEMPLATE_FOR_GW_SWAPPING:-../jaas-template-for-gw-swapping.conf}:/etc/gateway/config/jaas-template-for-gw-swapping.conf # loading JAAS template for SASL authentication at Gateway
      - ./ssl:/etc/gateway/ssl
    environment:
      GATEWAY_CONFIG: | 
        gateway:
          admin:
            endpoints:
              metrics: true
          secretStores:
            - name: vault-secret-store
              provider:
                type: Vault
                config:
                  address: http://vault:8200
                  authToken: vault-plaintext-root-token
                  path: secret/testing
                  separator: /
      
          streamingDomains:
            - name: sample-domain  
              type: kafka
              kafkaCluster:
                name: kafka-cluster-1 
                nodeIdRanges:
                  - name: d
                    start: 1 
                    end: 5
                bootstrapServers:
                  - id: internal-kafka-listener  
                    endpoint: "kafka-1:44444" 
          routes:
            - name: auth-swap-route
              endpoint: "localhost:19092" 
              brokerIdentificationStrategy:
                type: port 
              streamingDomain:
                name: sample-domain
                bootstrapServerId: internal-kafka-listener 
              security:
                auth: swap 
                ssl:
                  truststore:
                    location: /etc/gateway/ssl/truststore.jks
                    password:
                      file: /etc/gateway/ssl/password.txt 
                  keystore:
                    location: /etc/gateway/ssl/server-keystore.jks
                    password:
                      file: /etc/gateway/ssl/password.txt 
                  clientAuth: requested
                swapConfig:
                  clientAuth:
                    ssl:
                      principalMappingRules: RULE:^CN=(.*?),OU=Engineering.*$/$1/
                  secretStore: vault-secret-store
                  clusterAuth:
                    sasl:
                      mechanism: PLAIN
                      callbackHandlerClass: org.apache.kafka.common.security.authenticator.SaslClientCallbackHandler
                      jaasConfig:
                        file: /etc/gateway/config/jaas-template-for-gw-swapping.conf


    ports: # mapping gateway ports to the host ports. These are the ports on which the gateway will listen for requests.nodeIdRanges are 1 to 5. ports from 19092 (bootstrap), 19093 (nodeId=1), 19094, 19095, 19096, 19097 (nodeId=5) should be exposed.
      - "19092:19092"
      - "19093:19093"
      - "19094:19094"
      - "19095:19095"
      - "19096:19096"
      - "19097:19097"
      - "9190:9190"
    command: |
      bash -c "
        chmod +x /etc/confluent/docker/run 2>/dev/null || true
        exec /etc/confluent/docker/run
      "
